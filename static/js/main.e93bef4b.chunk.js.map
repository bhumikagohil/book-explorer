{"version":3,"sources":["Components/book-cards.js","Components/main-page.js","App.js","serviceWorker.js","index.js"],"names":["Book","Fragment","Container","Row","this","props","items","map","index","volumeInfo","title","imageLinks","infoLink","Col","md","lg","xl","key","href","target","Card","id","Img","variant","src","undefined","thumbnail","Title","Component","Main","state","query","displayBook","setState","fetch","method","then","response","json","className","Navbar","bg","Brand","Nav","Form","inline","InputGroup","FormControl","type","placeholder","onChange","event","value","onKeyPress","search","Append","Button","onClick","class","FormGroup","size","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e93bef4b.chunk.js","sourcesContent":["import React ,{ Component } from 'react';\r\nimport { Card , Container , Row , Col } from 'react-bootstrap'\r\n\r\nclass Book extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<Container >\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.props.items.map((items,index) =>{\r\n\t\t\t\t\t\t\t\tlet {title, imageLinks, infoLink} = items.volumeInfo;\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<Col  md={6} lg={4} xl={3}>\r\n\t\t\t\t\t\t\t\t\t\t<a \r\n\t\t\t\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\t\t\t\thref={infoLink}\r\n\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<Card id=\"book-card\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Card.Img \r\n\t\t\t\t\t\t\t\t\t\t\t\tid=\"book-img\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"top\" \r\n\t\t\t\t\t\t\t\t\t\t\t\tsrc={imageLinks !== undefined ? imageLinks.thumbnail : ''} \r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Card.Title  id=\"book-title\">{title}</Card.Title>\r\n\t\t\t\t\t\t\t\t\t\t\t</Card>\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</Container>\r\n\t\t\t</React.Fragment>\t\r\n\t\t\t)\r\n\t\t}\r\n}\r\n\r\nexport default Book;","import React , { Component } from 'react';\r\nimport {  Navbar , Nav , Form , FormControl ,Button , Container , Col , Row , FormGroup , InputGroup } from 'react-bootstrap';\r\n\r\nimport Book from './book-cards'\r\n\r\nimport './style.css';\r\n\r\nclass Main extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tquery: '',\r\n         items : [],\r\n         displayBook: false\r\n\t\t}\r\n\t}\r\n\tsearch(){\r\n        \tthis.setState({displayBook: true});\r\n\t\t\tconst BASE_URL = 'https://www.googleapis.com/books/v1/volumes?q=';\r\n\t\t\tfetch(`${BASE_URL}${this.state.query}`,{ method :`GET` })\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(json => {\r\n\t\t\t\tlet { items } = json;\r\n\t\t\t\tthis.setState({items})\r\n\t\t\t});\r\n\t}\r\n   render(){\r\n   \treturn(\r\n\t\t<React.Fragment>\r\n\t\t\t<div className=\"Global\">\r\n\t\t\t\t\t<Navbar  bg=\"white\" variant=\"light\">\r\n\t\t\t\t\t\t<Navbar.Brand className=\"font-weight-bolder mr-auto\" href=\"#home\">BOOK EXPLORER</Navbar.Brand>\r\n                  <Nav>\r\n\r\n                  </Nav>\r\n\t\t\t\t\t\t<Form inline>\r\n\t\t\t\t\t\t\t<InputGroup>\r\n\t\t\t\t\t\t\t<FormControl \r\n\t\t\t\t\t\t\t  type=\"text\" \r\n\t\t\t\t\t\t\t  placeholder=\"Search\" \r\n\t\t\t\t\t\t\t  className=\" mr-sm-2\"  \r\n\t\t\t\t\t\t\t  onChange={event => this.setState({query : event.target.value })}\r\n\t\t\t\t\t\t\t  onKeyPress={ event =>{\r\n\t\t\t\t\t\t\t\t if(event.key === 'Enter'){\r\n\t\t\t\t\t\t\t\t\t   this.search();\r\n\t\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t  }}\r\n\t\t\t\t\t\t\t  />\r\n\t\t\t\t\t\t\t  <InputGroup.Append>\r\n\t\t\t\t\t\t\t\t<Button variant=\"outline-secondary\" onClick={() => {this.search()}}><i class=\"fa fa-search\"></i></Button>\r\n\t\t\t\t\t\t\t\t</InputGroup.Append>\r\n\t\t\t\t\t\t\t</InputGroup>\r\n\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t</Navbar>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n             {this.state.displayBook ?\r\n               <Book items={this.state.items}/> :\r\n            \r\n                  <Container className=\"text-lg-left\" >\r\n                              <Row>\r\n                                 <Col>\r\n                                 <div id=\"welcome\">\r\n                                    <h2>\r\n                                    WELCOME TO <h1>BOOK EXPLORER</h1>\r\n                                    </h2>\r\n                                    <FormGroup>\r\n                                          <InputGroup \r\n                                          className=\"mr-sm-2 rounded\"\r\n                                          >\r\n                                             <FormControl\r\n                                             type=\"text\" \r\n                                             placeholder=\"Search book here!\"\r\n                                             onChange={event => this.setState({query : event.target.value })}\r\n                                             onKeyPress={ event =>{\r\n                                                if(event.key === 'Enter'){\r\n                                                      this.search();\r\n                                                }\r\n                                             }}\r\n                                             />\r\n                                          </InputGroup>\r\n                                    </FormGroup> \r\n                                       <Button size={\"md\"} onClick={() => {this.search()}} >Search a BOOK</Button>\r\n                                          </div>   \r\n                                 </Col>\r\n                                 <Col>\r\n                                    <div className=\"panel__image panel__image--book right\">\r\n                                          <a href=\"#\" class=\"books__book__image\">\r\n                                             <div class=\"books__book__img\">\r\n                                                <img src=\"https://d33wubrfki0l68.cloudfront.net/91ed41706514200a7ef212ebfeead7471354e622/01dcc/images/books/design-systems--large-opt.png\"/>\r\n                                             </div>\r\n                                          </a>\r\n                                    </div>\r\n                                 </Col>\r\n                              </Row>     \r\n                        </Container>\r\n                     }\r\n                    \r\n\t  \t\t</div>\r\n\t   </React.Fragment>\r\n     )\r\n   } \t\r\n}\r\nexport default Main;","import React from 'react';\r\n\r\nimport Main from './Components/main-page'\r\n\r\nfunction App() {\r\n  return (\r\n    \r\n    <div className=\"App\">\r\n      <Main />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}